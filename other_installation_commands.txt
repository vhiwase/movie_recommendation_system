ssh -i mypemfile.pem ubuntu@66.0.44.191

cd /usr/share/

sudo mkdir api

cd api

git clone https://github.com/vhiwase/movie_recommendation_system.git

sudo chmod 777 movie_recommendation_system/

cd movie_recommendation_system/

sudo apt-get remove docker docker-engine docker.io containerd runc

sudo apt-get update

sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io

apt-cache madison docker-ce

sudo apt-get install docker-ce=5:20.10.5~3-0~ubuntu-focal docker-ce-cli=5:20.10.5~3-0~ubuntu-focal containerd.io

sudo apt  install docker-compose

sudo usermod -a -G docker $USER

exit

https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04

https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04

https://www.digitalocean.com/community/tutorials/how-to-setup-a-firewall-with-ufw-on-an-ubuntu-and-debian-cloud-server

sudo apt  install nmap

nmap -open 52.37.175.5

sudo apt update

sudo apt install nginx

sudo ufw status

sudo ufw enable

sudo ufw status

sudo ufw app list

sudo ufw allow 'Nginx HTTP'
#sudo ufw delete 'Nginx HTTP'

sudo ufw allow 'OpenSSH'

systemctl status nginx
#sudo systemctl stop nginx
#sudo systemctl start nginx
#sudo systemctl restart nginx
#sudo systemctl reload nginx
#sudo systemctl disable nginx
#sudo systemctl enable nginx

sudo apt-get install apache2-utils

sudo htpasswd -c /etc/nginx/.htpasswd demo
#New password:nmt 
#Re-type new password:nmt 
#Adding password for user demo

cat /etc/nginx/.htpasswd

sudo certbot --nginx -d ocr.domain.com -d ocrapi.eastus.cloudapp.azure.com

sudo certbot renew --dry-run

docker rmi $(docker images -a -q)

sudo nano /etc/hosts
#127.0.0.1 localhost
#::1 localhost
#40.121.217.232 technomilecognitivieservices.cognitiveservices.azure.com
## The following lines are desirable for IPv6 capable hosts
#::1 ip6-localhost ip6-loopback
#fe00::0 ip6-localnet
#ff00::0 ip6-mcastprefix
#ff02::1 ip6-allnodes
#ff02::2 ip6-allrouters
#ff02::3 ip6-allhosts

cd /etc/nginx/sites-available/
sudo nano default 
server {
	listen 80;
	listen [::]:80;
	root /var/www/html;
	server_name _;
	location / {
		try_files $uri $uri/ =404;
	}
}
sudo nginx -t
nmap -open 52.37.176.7
sudo nano nmt
server {

    listen 80 default_server;
    listen [::]:80 default_server;
    server_name 52.37.176.7;

    location / {
        proxy_pass http://0.0.0.0:5004;
    }
    
}
sudo ln -s /etc/nginx/sites-available/nmt /etc/nginx/sites-enabled/nmt
sudo nginx -t
sudo systemctl restart nginx

NOTE:

Sometimes when we build docker images we usually do not associate a new tag to every build we do. This will replace our previously build tags for the same build to "<none>" in our system which creates a redundant "<none>" list of TAG and REPOSITORY.

In order to list down all those dangling images we can use the following command:
docker images -a --filter "dangling=true"

In order to list down all those useful images we can use the following command:
docker images -a --filter "dangling=false"

We can also delete those not so useful dangling images using the following command:
docker rmi -f $(docker images -a --filter "dangling=true")

You can also have multiple tags when building the image:

Example:

$ docker build . -t airbyte/source_scaffold_source_python:latest -t airbyte/source_scaffold_source_python:1.2.1
Here latest version will be same as 1.2.1

$ docker build . -t airbyte/source_scaffold_source_python:latest -t airbyte/source_scaffold_source_python:1.2.2
Here latest version will be same as 1.2.2

This will keep track of every version and with latest sync.
